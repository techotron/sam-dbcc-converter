AWSTemplateFormatVersion: '2010-09-09'

Description: Serverless Application Model - DBCC Application

Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description: Name of the environment to deploy to
    Default: dev
    Type: String

  AppVersion:
    Description: Version of the application
    Default: v1
    Type: String

  AppName:
    Description: Name of the application
    Default: sam-dbcc-converter
    Type: String

Globals:
  Function:
    Timeout: 30
    Runtime: python3.7
    Environment:
      Variables:
        APP_VERSION: !Ref AppVersion
        APP_NAME: !Ref AppName
        DDB_TABLE: !Sub '${AppName}-${Environment}'
        SQS_CONVERTER_QUEUE: !ImportValue dbcConverterQueue
        S3_BUCKET_NAME: !ImportValue dbcConverterBucket

Resources:
  ApplicationApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ApplicationApi
      StageName: !Ref Environment

  AppVersionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: version/
      Handler: app.get_version
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
        Hooks:
          PreTraffic: !Ref AppVersionPreTrafficHookFunction
          PostTraffic: !Ref AppVersionPostTrafficHookFunction
      Events:
        Version:
          Type: Api
          Properties:
            RestApiId: !Ref ApplicationApi
            Path: /version
            Method: get

  AppVersionPreTrafficHookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: version/
      Handler: test_handler.test_version_pre_traffic
      FunctionName: 'CodeDeployHook_preTrafficHook'
      DeploymentPreference:
        Enabled: false
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - codedeploy:PutLifecycleEventHookExecutionStatus
              Resource: "*"
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !Ref AppVersionFunction.Version
      Environment:
        Variables:
          CurrentFunctionVersion: !Ref AppVersionFunction.Version

  AppVersionPostTrafficHookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: version/
      Handler: test_handler.test_version_post_traffic
      FunctionName: 'CodeDeployHook_postTrafficHook'
      DeploymentPreference:
        Enabled: false
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - codedeploy:PutLifecycleEventHookExecutionStatus
              Resource: "*"
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !Ref AppVersionFunction.Version

  AppProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: processor/
      Handler: app.main
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Policies:
       - Version: '2012-10-17'
         Statement:
           - Effect: Allow
             Action:
               - dynamodb:*
             Resource: !GetAtt dbccDynamoDb.Arn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !ImportValue dbcConverterS3Queue-ARN
            BatchSize: 1

  AppConverterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: converter/
      Handler: app.main
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: !GetAtt dbccDynamoDb.Arn
            - Effect: Allow
              Action:
                - s3:*
              Resource: "*"
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !ImportValue dbcConverterQueue-ARN
            BatchSize: 1

  StreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: stream_processor/
      Handler: app.main
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Policies:
       - Version: '2012-10-17'
         Statement:
           - Effect: Allow
             Action:
               - dynamodb:*
             Resource: !GetAtt dbccDynamoDb.Arn
           - Effect: Allow
             Action:
               - dynamodb:*
             Resource: !GetAtt dbccDynamoDb.StreamArn
           - Effect: Allow
             Action:
               - s3:*
             Resource: "*"
           - Effect: Allow
             Action:
               - sqs:*
             Resource: !ImportValue dbcConverterQueue-ARN
      Events:
        DdbEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt dbccDynamoDb.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
            Enabled: true

  dbccDynamoDb:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AppName}-${Environment}'
      AttributeDefinitions:
        -
          AttributeName: "messageId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "messageId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      StreamSpecification:
        StreamViewType: NEW_IMAGE

Outputs:
  ApplicationApi:
    Description: "API Gateway endpoint URL for the application"
    Value: !Sub "https://${ApplicationApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"

  dbccDynamoDbTable:
    Description: DynamoDB Table Name
    Value: !Ref dbccDynamoDb
    Export:
      Name: dbccDynamoDb

  dbccDynamoDbStreamArn:
    Description: DynamoDB Stream ARN
    Value: !GetAtt dbccDynamoDb.StreamArn
    Export:
      Name: dbccDynamoDb-streamarn
